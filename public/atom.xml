<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曜彤.手记</title>
  <icon>https://www.yhspy.com/images/rss.png</icon>
  <subtitle>YHSPY</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://www.yhspy.com/"/>
  <updated>2020-06-01T11:41:50.435Z</updated>
  <id>https://www.yhspy.com/</id>
  
  <author>
    <name>于航(曜彤)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“对象创建类”设计模式（C++）</title>
    <link href="https://www.yhspy.com/2020/06/01/%E2%80%9C%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E7%B1%BB%E2%80%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88C-%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/06/01/%E2%80%9C%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E7%B1%BB%E2%80%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88C-%EF%BC%89/</id>
    <published>2020-06-01T09:17:37.000Z</published>
    <updated>2020-06-01T11:41:50.435Z</updated>
    
    <summary type="html">
    
      通过“对象创建”模式绕开 new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
      <category term="设计模式" scheme="https://www.yhspy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>“单一职责类”设计模式（C++）</title>
    <link href="https://www.yhspy.com/2020/05/29/%E2%80%9C%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E7%B1%BB%E2%80%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88C-%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/05/29/%E2%80%9C%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E7%B1%BB%E2%80%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88C-%EF%BC%89/</id>
    <published>2020-05-29T07:37:37.000Z</published>
    <updated>2020-05-30T07:25:01.997Z</updated>
    
    <summary type="html">
    
      在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是：随着需求的变化，子类急剧膨胀，同时充斥着重复代码的。而这时候的关键则是划清责任。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
      <category term="设计模式" scheme="https://www.yhspy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>“组件协作类”设计模式（C++）</title>
    <link href="https://www.yhspy.com/2020/05/28/%E2%80%9C%E7%BB%84%E4%BB%B6%E5%8D%8F%E4%BD%9C%E7%B1%BB%E2%80%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88C-%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/05/28/%E2%80%9C%E7%BB%84%E4%BB%B6%E5%8D%8F%E4%BD%9C%E7%B1%BB%E2%80%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88C-%EF%BC%89/</id>
    <published>2020-05-28T03:40:48.000Z</published>
    <updated>2020-05-28T11:53:59.621Z</updated>
    
    <summary type="html">
    
      该类设计模式主要用于解决组件之间的协作问题。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
      <category term="设计模式" scheme="https://www.yhspy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++17 部分新特性一览</title>
    <link href="https://www.yhspy.com/2020/05/25/C-17-%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%80%E8%A7%88/"/>
    <id>https://www.yhspy.com/2020/05/25/C-17-%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%80%E8%A7%88/</id>
    <published>2020-05-25T06:36:45.000Z</published>
    <updated>2020-05-25T11:10:53.294Z</updated>
    
    <summary type="html">
    
      C++17 又称 C++1z，是 C++ 的现行标准的非正式名称，正式名称为 “International Standard ISO/IEC Programming Language C++”。C++17 旨在作为大型扩展，最终的投票期于2017年结束。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 字符串拷贝优化策略：Eager-Copy、SSO 与 COW</title>
    <link href="https://www.yhspy.com/2020/05/24/C-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%B7%E8%B4%9D%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5%EF%BC%9AEager-Copy%E3%80%81SSO-%E4%B8%8E-COW/"/>
    <id>https://www.yhspy.com/2020/05/24/C-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%B7%E8%B4%9D%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5%EF%BC%9AEager-Copy%E3%80%81SSO-%E4%B8%8E-COW/</id>
    <published>2020-05-24T01:31:12.000Z</published>
    <updated>2020-05-26T04:40:53.452Z</updated>
    
    <summary type="html">
    
      在 C++ 中，对于一个类型为 std::string 的字符串对象来说，可以有多种方式来拷贝它所对应的资源。而在这些方法中，最常见的三种为：Eager-Copy、SSO 以及 COW。其中最为广泛使用的是 “SSO”，而其他方式则已大都不再被编译器所使用。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>“Effective Modern C++” 读书笔记（二）</title>
    <link href="https://www.yhspy.com/2020/05/23/Effective-Modern-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/05/23/Effective-Modern-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-05-23T09:19:08.000Z</published>
    <updated>2020-05-24T02:29:35.016Z</updated>
    
    <summary type="html">
    
      文接上回，本文为上一文的第二篇。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>“Effective Modern C++” 读书笔记（一）</title>
    <link href="https://www.yhspy.com/2020/05/14/Effective-Modern-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/05/14/Effective-Modern-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-05-14T02:32:16.000Z</published>
    <updated>2020-05-23T09:27:38.707Z</updated>
    
    <summary type="html">
    
      《Effective Modern C++》这本书主要介绍了 C++11 与 C++14 中的一些新的语言特性及编码建议。由于这段时间忙于它事，看书的速度会放缓，因此关于这本书的内容就一边读一边整理记录了。同《Effective C++ 3th》一样，这本书的行文也是按照“建议条目”的方式通过几个大的主题分门别类进行介绍的，其中部分之前博客文章中已经提到过得内容将不再赘述。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>“深入理解 C++11：C++11 新特性解析与应用” 读书笔记（二）</title>
    <link href="https://www.yhspy.com/2020/05/12/%E2%80%9C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-C-11%EF%BC%9AC-11-%E6%96%B0%E7%89%B9%E6%80%A7%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%BA%94%E7%94%A8%E2%80%9D-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/05/12/%E2%80%9C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-C-11%EF%BC%9AC-11-%E6%96%B0%E7%89%B9%E6%80%A7%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%BA%94%E7%94%A8%E2%80%9D-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-05-12T08:21:23.000Z</published>
    <updated>2020-05-12T13:03:13.456Z</updated>
    
    <summary type="html">
    
      文接上回，由于接下来关于“变长模板”、“原子类型与原子操作”等的内容会比较多，为了保证阅读体验，因此这里将分为两篇博文来分别记录。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>“深入理解 C++11：C++11 新特性解析与应用” 读书笔记（一）</title>
    <link href="https://www.yhspy.com/2020/05/09/%E2%80%9C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-C-11%EF%BC%9AC-11-%E6%96%B0%E7%89%B9%E6%80%A7%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%BA%94%E7%94%A8%E2%80%9D%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/05/09/%E2%80%9C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-C-11%EF%BC%9AC-11-%E6%96%B0%E7%89%B9%E6%80%A7%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%BA%94%E7%94%A8%E2%80%9D%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-05-09T02:22:12.000Z</published>
    <updated>2020-05-12T08:22:50.758Z</updated>
    
    <summary type="html">
    
      作为一本之前已经读过两遍的书，终于决定在第三次“复习”的时候做下读书笔记了。鉴于之前已经完整读过《Primer C++ 5th》、《Effective C++ 3th》两本书，因此本文仅作为查缺补漏之用，对于前两本书中没有提到一些诸如“最小垃圾回收”、以及“原子类型与原子操作”等内容进行回顾与记录。整个 C++ 系列还有一本想完整仔细阅读的《Effective Modern C++ - 42 Specific Ways to Improve Your Use of C++11 and C++14》可能会稍微往后放了，由于 C++14 仅作为 C++11 的微小改进和补充，对于一些常用的特性其实已经在实际项目中开始使用了。而对于诸如 std::future 以及 std::promise 等特性，由于其涉及异步和并发相关场景，因此可以参考《C++ Concurrency in Action 2th》一书，暂时没有实际需求便先不打算进行了解。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 聚合类与 POD</title>
    <link href="https://www.yhspy.com/2020/05/06/C-%E8%81%9A%E5%90%88%E7%B1%BB%E4%B8%8E-POD/"/>
    <id>https://www.yhspy.com/2020/05/06/C-%E8%81%9A%E5%90%88%E7%B1%BB%E4%B8%8E-POD/</id>
    <published>2020-05-06T09:54:58.000Z</published>
    <updated>2020-05-23T08:41:24.948Z</updated>
    
    <summary type="html">
    
      POD 在 C++ 中一直是一个没有很直观代码体现的概念，但其存在却涉及到了 C++ 中诸如字节赋值、内存布局、静态初始化安全甚至是有关 EBO 优化等相关的内容，而本文我们将对 POD 的概念进行总结，并同时对比其与“聚合类”之间的关系。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 空基类优化（EBO）与私有继承</title>
    <link href="https://www.yhspy.com/2020/04/27/C-%E7%A9%BA%E5%9F%BA%E7%B1%BB%E4%BC%98%E5%8C%96%EF%BC%88EBO%EF%BC%89%E4%B8%8E%E7%A7%81%E6%9C%89%E7%BB%A7%E6%89%BF/"/>
    <id>https://www.yhspy.com/2020/04/27/C-%E7%A9%BA%E5%9F%BA%E7%B1%BB%E4%BC%98%E5%8C%96%EF%BC%88EBO%EF%BC%89%E4%B8%8E%E7%A7%81%E6%9C%89%E7%BB%A7%E6%89%BF/</id>
    <published>2020-04-27T12:27:20.000Z</published>
    <updated>2020-05-23T08:35:45.865Z</updated>
    
    <summary type="html">
    
      通常我们认为“私有继承”和“组合”都有着相同的应用层语义，即：派生类或包含类是通过继承的类或组合的类对象来实现的（is-implemented-in-terms-of）。但在 C++ 中，由于 EBO（Empty Base Optimization）机制的存在，某种情况下我们可能会更倾向于使用私有继承而非组合的方式。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>常用 C++ 高效开发范式（二）</title>
    <link href="https://www.yhspy.com/2020/04/26/%E5%B8%B8%E7%94%A8-C-%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91%E8%8C%83%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/04/26/%E5%B8%B8%E7%94%A8-C-%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91%E8%8C%83%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-04-26T13:28:21.000Z</published>
    <updated>2020-04-29T08:00:57.361Z</updated>
    
    <summary type="html">
    
      文接上回，本文将继续记录常见的 C++ 高效开发范式，这些范式均总结于《Effective C++ 3th》一书。由于该书出版年代较为久远，因此对于书中条款的不适用之处，作者将尽量予以纠正并给出自己的建议。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 未限定名称查找与 ADL</title>
    <link href="https://www.yhspy.com/2020/04/26/C-%E6%9C%AA%E9%99%90%E5%AE%9A%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE%E4%B8%8E-ADL/"/>
    <id>https://www.yhspy.com/2020/04/26/C-%E6%9C%AA%E9%99%90%E5%AE%9A%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE%E4%B8%8E-ADL/</id>
    <published>2020-04-26T13:10:29.000Z</published>
    <updated>2020-04-26T15:31:05.838Z</updated>
    
    <summary type="html">
    
      简单总结下 ADL（aka. Koenig Lookup）算法与 C++ 中对于“未限定名称”查找之间的关系。毕竟日常对于 using、命名空间内（或标准库全特化）的自定义 swap 函数等的用法都涉及到这部分内容，记录下免得踩坑。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>常用 C++ 高效开发范式（一）</title>
    <link href="https://www.yhspy.com/2020/04/24/%E5%B8%B8%E7%94%A8-C-%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91%E8%8C%83%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/04/24/%E5%B8%B8%E7%94%A8-C-%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91%E8%8C%83%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-04-24T13:59:46.000Z</published>
    <updated>2020-05-17T01:30:51.416Z</updated>
    
    <summary type="html">
    
      还是趁最近疫情 WFH 的闲暇时间，把《Effective C++ 3th》这本书读了一遍。说句实话，整个读书过程的体验并不是很好。首先，这本书最新修订版的出版时间决定了其内容会稍微有些脱节和过时，比如整本书中会出现 C++ 在其 TR1（Technical Report 1）版本中的一些诸如 “std::auto_ptr” 这类现在已经被弃用的语法特性；其次，由于本书的中文版是由台湾的侯捷先生翻译的，因此读起来很多地方还是比较拗口，其带有浓烈台湾语言特色的文字，需要你在读书的过程中再重新整理语句然后加以理解；最后就是原作者的行文方式，个人感觉废话偏多，而且行文连续性很差，对于一些重点并没有使用直观的方式进行展示，而是直接平铺直叙，从上到下叙述，给人的感觉是想到哪写到哪。但无论如何整体来看，还是瑕不掩瑜的。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>“Primer C++ 5th” 完全笔记（第17-19章）</title>
    <link href="https://www.yhspy.com/2020/04/16/Primer-C-%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC17-19%E7%AB%A0%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/04/16/Primer-C-%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC17-19%E7%AB%A0%EF%BC%89/</id>
    <published>2020-04-16T12:43:00.000Z</published>
    <updated>2020-05-14T10:06:24.840Z</updated>
    
    <summary type="html">
    
      文接上回，本文将记录全书第17-19章中出现的知识点，这几章主要介绍了 C++ 中有关标准库特殊设施、用于大型程序的工具以及特殊工具与技术等相关内容。注意这些知识点的记录完全遵循我个人的想法，因此也仅适配我个人的情况和需求，未记录的其他知识点并非不重要。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>“Primer C++ 5th” 完全笔记（第14-16章）</title>
    <link href="https://www.yhspy.com/2020/04/14/Primer-C-%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC14-16%E7%AB%A0%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/04/14/Primer-C-%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC14-16%E7%AB%A0%EF%BC%89/</id>
    <published>2020-04-14T14:24:37.000Z</published>
    <updated>2020-05-19T10:01:17.283Z</updated>
    
    <summary type="html">
    
      文接上回，本文将记录全书第14-16章中出现的知识点，这几章主要介绍了 C++ 中有关面操作重载和类型转换、向对象程序设计（OOP）与模板与泛型编程等相关内容。注意这些知识点的记录完全遵循我个人的想法，因此也仅适配我个人的情况和需求，未记录的其他知识点并非不重要。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>“Primer C++ 5th” 完全笔记（第09-13章）</title>
    <link href="https://www.yhspy.com/2020/04/12/Primer-C-%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC9-13%E7%AB%A0%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/04/12/Primer-C-%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC9-13%E7%AB%A0%EF%BC%89/</id>
    <published>2020-04-12T09:28:14.000Z</published>
    <updated>2020-05-26T13:24:27.440Z</updated>
    
    <summary type="html">
    
      文接上回，本文将记录全书第9-13章中出现的知识点，这几章主要介绍了 C++ 中有关顺序容器、泛型算法、关联容器、动态内存以及拷贝控制等相关内容。注意这些知识点的记录完全遵循我个人的想法，因此也仅适配我个人的情况和需求，未记录的其他知识点并非不重要。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>“Primer C++ 5th” 完全笔记（第01-08章）</title>
    <link href="https://www.yhspy.com/2020/04/10/Primer-C-%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC1-8%E7%AB%A0%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/04/10/Primer-C-%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC1-8%E7%AB%A0%EF%BC%89/</id>
    <published>2020-04-10T05:20:03.000Z</published>
    <updated>2020-05-14T10:06:06.416Z</updated>
    
    <summary type="html">
    
      最近趁新冠肺炎在家工作（WFH）期间的“充足”闲暇时间，把 Primer C++（第五版）整本书又完整地看了一遍。花了将近一个月的时间，整理出近 300 条左右的笔记，基本涵盖了所有 C++ 语言（C++11）需要注意的细节，而本文将首先记录全书第1-8章中出现的知识点。注意这些知识点的记录完全遵循我个人的想法，因此也仅适配我个人的情况和需求，未记录的其他知识点并非不重要。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WebAssembly Summit 2020 — 议题深度解析（下）</title>
    <link href="https://www.yhspy.com/2020/03/12/WebAssembly-Summit-2020-%E2%80%94-%E8%AE%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/03/12/WebAssembly-Summit-2020-%E2%80%94-%E8%AE%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2020-03-12T07:08:42.000Z</published>
    <updated>2020-03-12T07:17:34.360Z</updated>
    
    <summary type="html">
    
      在上一篇文章中，我们介绍了 WebAssembly Summit 各位嘉宾在上半场带来的 Wasm 在标准制定、编译优化以及浏览器引擎上的一些精彩分享。本文我们将继续回顾在大会下半场中，分享者为我们带来的，Wasm 在现阶段各类工程领域中的一些精彩实践。
    
    </summary>
    
    
    
      <category term="WebAssembly" scheme="https://www.yhspy.com/tags/WebAssembly/"/>
    
  </entry>
  
  <entry>
    <title>WebAssembly Summit 2020 — 议题深度解析（上）</title>
    <link href="https://www.yhspy.com/2020/03/11/WebAssembly-Summit-2020-%E2%80%94-%E8%AE%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://www.yhspy.com/2020/03/11/WebAssembly-Summit-2020-%E2%80%94-%E8%AE%AE%E9%A2%98%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2020-03-11T09:35:44.000Z</published>
    <updated>2020-03-11T10:03:35.085Z</updated>
    
    <summary type="html">
    
      第一届 WebAssembly Summit 峰会于2月10日在美国山景城的 Google 总部顺利召开。大会分享者有我们熟悉的科技漫画作者—— 来自Mozilla 的 Lin Clark、WebAssembly（下文简称 Wasm）的基础设施工具链 Emscripten / Binaryen 作者——来自 Google 的 Alon，以及众多来自各大知名互联网公司的 Wasm 研究和开发人员。WebAssembly Summit 是由 Wasm 社区举办，专门讨论 Wasm 当前和未来发展，以及其相关议题的全球性大会（A one day, single track, conference about all things WebAssembly.）。
    
    </summary>
    
    
    
      <category term="WebAssembly" scheme="https://www.yhspy.com/tags/WebAssembly/"/>
    
  </entry>
  
  <entry>
    <title>C++ 编码准则之 “The Rule of Three”</title>
    <link href="https://www.yhspy.com/2019/11/22/C-%E7%BC%96%E7%A0%81%E5%87%86%E5%88%99%E4%B9%8B-%E2%80%9CThe-Rule-of-Three%E2%80%9D/"/>
    <id>https://www.yhspy.com/2019/11/22/C-%E7%BC%96%E7%A0%81%E5%87%86%E5%88%99%E4%B9%8B-%E2%80%9CThe-Rule-of-Three%E2%80%9D/</id>
    <published>2019-11-22T13:39:14.000Z</published>
    <updated>2020-01-15T12:41:15.082Z</updated>
    
    <summary type="html">
    
      不同于 C 语言，在 C++ 中，我们通常会使用“类”结构，来定义和管理资源。类，可以让我们将程序逻辑和数据按照不同的角色，进行封装，进而提高代码的重用性、灵活性和扩展性。但随之而来的类对象的“隐式”拷贝，却也在不经意间充斥在整个应用程序运行的各个生命周期中。好的类结构定义，可以让应用程序通过“资源移动”等方式，使数据资源的流动和使用变得更高效。相反，不当的类结构定义反而会使应用程序，在运行过程中发生未知的资源使用问题，比如常见的内存泄漏、内存溢出、悬挂指针，以及非法的内存释放，等等。那么，为了尽可能避免出现这些问题，”The Rule of Three“ 这一套编码准则，在经过不断地实践后，便被人们总结出来了。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中的移动构造与 noexcept</title>
    <link href="https://www.yhspy.com/2019/11/22/C-%E4%B8%AD%E7%9A%84%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E4%B8%8E-noexcept/"/>
    <id>https://www.yhspy.com/2019/11/22/C-%E4%B8%AD%E7%9A%84%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E4%B8%8E-noexcept/</id>
    <published>2019-11-22T13:23:18.000Z</published>
    <updated>2019-11-22T13:35:23.651Z</updated>
    
    <summary type="html">
    
      相信对 C++ 语言熟悉的同学应该都知道，C++ 在它的第11个版本中加入了新的名为“移动构造函数”的构造函数类型。通过使用移动构造函数，我们可以在对象进行“复制”时，来直接“窃取”拷贝对象所保有的一些资源。比如，已经在原对象中分配的堆内存、文件描述符，以及 IO 流等。但是在大多数情况下，当我们在代码中声明类的移动构造函数时，都通常会使用 “noexcept” 关键字来修饰对应的移动构造函数，那么这样做是为什么呢？或者说这样做有什么样的好处呢？今天我们就来探讨一下这个问题。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>浅谈企业股权设计</title>
    <link href="https://www.yhspy.com/2019/10/14/%E6%B5%85%E8%B0%88%E4%BC%81%E4%B8%9A%E8%82%A1%E6%9D%83%E8%AE%BE%E8%AE%A1/"/>
    <id>https://www.yhspy.com/2019/10/14/%E6%B5%85%E8%B0%88%E4%BC%81%E4%B8%9A%E8%82%A1%E6%9D%83%E8%AE%BE%E8%AE%A1/</id>
    <published>2019-10-14T00:43:29.000Z</published>
    <updated>2019-10-29T05:20:55.222Z</updated>
    
    <summary type="html">
    
      最近花点时间读了一些“创业股权设计”相关的书籍，本文用来总结一些与之相关的要点。初创企业在企业进行备案注册与创始人（合伙人）职能分配时，总会涉及到公司股权划分的问题。合理的股权分配原则能够产生“1 + 1 &gt; 2”的效果。反之，不合理的股权划分则一般都或多或少预示着企业内部可能潜在的利益分配冲突。随着公司估值的增加，冲突也被逐渐放大，以致最后可能会发生诸如“兄弟式入伙，仇人式散伙”等影响企业生存的问题。因此，合理的股权划分便显得十分重要。
    
    </summary>
    
    
    
      <category term="创业" scheme="https://www.yhspy.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="股权设计" scheme="https://www.yhspy.com/tags/%E8%82%A1%E6%9D%83%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>SICP-计算机程序的构造和解释（一）</title>
    <link href="https://www.yhspy.com/2019/10/11/SICP-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://www.yhspy.com/2019/10/11/SICP-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2019-10-11T12:54:34.000Z</published>
    <updated>2019-10-29T14:43:52.359Z</updated>
    
    <summary type="html">
    
      SICP 第一章内容回顾。Lisp 语言的一种最重要的特点就是：计算过程的 Lisp 描述（称为过程）本身又可以作为 Lisp 的数据来表示和操作。
    
    </summary>
    
    
    
      <category term="SICP" scheme="https://www.yhspy.com/tags/SICP/"/>
    
  </entry>
  
  <entry>
    <title>English key Points Conclusion .1</title>
    <link href="https://www.yhspy.com/2019/09/16/English-key-Points-Conclusion-1/"/>
    <id>https://www.yhspy.com/2019/09/16/English-key-Points-Conclusion-1/</id>
    <published>2019-09-16T02:02:52.000Z</published>
    <updated>2019-10-20T03:59:05.376Z</updated>
    
    <summary type="html">
    
      English knowledge series, key points conclusion .1
    
    </summary>
    
    
    
      <category term="English" scheme="https://www.yhspy.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Privacy Policy for TOVD</title>
    <link href="https://www.yhspy.com/2019/09/13/Privacy-Policy-for-TOVD/"/>
    <id>https://www.yhspy.com/2019/09/13/Privacy-Policy-for-TOVD/</id>
    <published>2019-09-13T14:05:42.000Z</published>
    <updated>2019-09-13T14:18:42.005Z</updated>
    
    <summary type="html">
    
      This page informs you of our policies regarding the collection, use, and disclosure of personal data when you use our Service and the choices you have associated with that data. Our Privacy Policy for TOVD is created with the help of the Free Privacy Policy Generator.
    
    </summary>
    
    
    
      <category term="Others" scheme="https://www.yhspy.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 杂记：全等、indexOf 语义与 Membrane</title>
    <link href="https://www.yhspy.com/2019/09/09/JavaScript-%E6%9D%82%E8%AE%B0%EF%BC%9A%E5%85%A8%E7%AD%89%E3%80%81indexOf-%E8%AF%AD%E4%B9%89%E4%B8%8E-Membrane/"/>
    <id>https://www.yhspy.com/2019/09/09/JavaScript-%E6%9D%82%E8%AE%B0%EF%BC%9A%E5%85%A8%E7%AD%89%E3%80%81indexOf-%E8%AF%AD%E4%B9%89%E4%B8%8E-Membrane/</id>
    <published>2019-09-09T12:06:50.000Z</published>
    <updated>2019-10-05T14:20:25.181Z</updated>
    
    <summary type="html">
    
      专门写篇文章来记录最近一段时间遇到的几个小问题。本文主要介绍 JavaScript 中全等（“===”）运算符和 “Array.prototype.indexOf” 方法在 ECMA262 标准中的语义以及 JavaScript Membrane 的定义。其中 “JavaScript Membrane” 是 TC39 官方给出的对 ES6 中新增的 Proxy 特性正确使用场景的代码描述。
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://www.yhspy.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>C++ 编译器优化之 RVO 与 NRVO</title>
    <link href="https://www.yhspy.com/2019/09/01/C-%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96%E4%B9%8B-RVO-%E4%B8%8E-NRVO/"/>
    <id>https://www.yhspy.com/2019/09/01/C-%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96%E4%B9%8B-RVO-%E4%B8%8E-NRVO/</id>
    <published>2019-09-01T09:32:04.000Z</published>
    <updated>2020-04-14T00:41:09.371Z</updated>
    
    <summary type="html">
    
      RVO 即 “Return Value Optimization”，是一种编译器优化技术，通过该技术编译器可以减少函数返回时生成临时值值（对象）的个数，从某种程度上可以提高程序的运行效率，对需要分配大量内存的类对象其值复制过程十分友好。NRVO 全称为 “Named Return Value Optimization”，该优化的大致流程与 RVO 类似。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++11 好用的新语法特性</title>
    <link href="https://www.yhspy.com/2019/08/31/C-11-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%B0%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A7/"/>
    <id>https://www.yhspy.com/2019/08/31/C-11-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%B0%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A7/</id>
    <published>2019-08-31T08:17:08.000Z</published>
    <updated>2019-09-01T09:32:49.435Z</updated>
    
    <summary type="html">
    
      C++ 语言自1983年发展至今已经过去了36年之久。从 C++98 标准到2017年的第五个标准也就是 C++17，C++ 语言的发展逐渐“脱离”了人们能够熟练驾驭它的速度。不仅如此，由于 C++ 语言在它设计之初，就秉承着这样一个设计理念：即要成为一种“能够直接和广泛地支持多种程序设计风格的语言，比如函数式编程、OOP 范式等”，并且在此之上还需要同时尽可能地与 C 语言的语法特性进行兼容。由于这些种种约束，导致 C++ 语言体系变得较为复杂和混乱，当然上述提到的只是造成这种问题的一部分原因。虽然 C++ 标准中有很多不是那么容易理解且学习路线陡峭的语法特性，但相对的，也有很多十分好用且易学的语法特性。今天，我们就来介绍几个在 C++11 标准中新增的，简单易用的语法特性。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 左值、右值与右值引用</title>
    <link href="https://www.yhspy.com/2019/08/31/C-%E5%B7%A6%E5%80%BC%E3%80%81%E5%8F%B3%E5%80%BC%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/"/>
    <id>https://www.yhspy.com/2019/08/31/C-%E5%B7%A6%E5%80%BC%E3%80%81%E5%8F%B3%E5%80%BC%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</id>
    <published>2019-08-31T08:16:32.000Z</published>
    <updated>2019-08-31T08:32:56.296Z</updated>
    
    <summary type="html">
    
      在我们日常的 C/C++ 语言学习过程中，我们肯定会经常听到诸如“左值”和“右值”这样的名词。不仅如此，在我们编译 C/C++ 应用程序时，编译器偶尔也会在其错误信息中包含与左值、右值相关的错误信息。那么究竟什么是左值和右值呢？是不是同它们的名字一样，可以通过一些“位置”因素来进行判断呢？比如位于某个语法结构中左侧的值就是左值，而位于右边的就是右值？而在本文中，我们将以 C++ 语言为例来介绍在其语言体系中，左值、右值和右值引用的概念和应用。
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.yhspy.com/tags/C/"/>
    
  </entry>
  
</feed>
